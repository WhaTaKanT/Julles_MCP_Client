using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Text.Json; // Required for JsonSerializer

namespace MCP_DevSolution_1_FrontendClient_ModelContextProtocol
{
    public class LlmToolCallRequest
    {
        // This ID is generated by the LLM if it makes multiple tool calls in one response,
        // or if it needs to correlate a tool call with a later tool result.
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("tool_name")] // Or "function_name" if mapping to OpenAI's old function calling
        public string ToolName { get; set; }

        // Arguments are often a JSON string that needs to be deserialized,
        // or could be a dictionary if the API directly provides that.
        // OpenAI's tool_calls.function.arguments is a string.
        [JsonPropertyName("arguments_json")]
        public string ArgumentsJson { get; set; }

        // Convenience property to get deserialized arguments
        [JsonIgnore]
        public Dictionary<string, object> Arguments
        {
            get
            {
                if (string.IsNullOrWhiteSpace(ArgumentsJson))
                {
                    return new Dictionary<string, object>();
                }
                try
                {
                    return JsonSerializer.Deserialize<Dictionary<string, object>>(ArgumentsJson,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
                catch (JsonException)
                {
                    // Handle or log error if arguments are not valid JSON
                    return new Dictionary<string, object>();
                }
            }
        }
    }
}
